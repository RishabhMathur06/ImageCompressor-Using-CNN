# -*- coding: utf-8 -*-
"""ImageCompression_Using_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OTS6TmGlbayKejkimspSQWMDl2WmdATx
"""

# Import necessary libraries
import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.models import Model
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

# Load the image and preprocess
img = Image.open("20160910_120450.jpg")
img = img.resize((256, 256))  # Resize the image to a smaller size
img_array = np.array(img) / 255.0  # Normalize pixel values

# Define the CNN architecture
input_layer = Input(shape=img_array.shape)
conv1 = Conv2D(16, kernel_size=3, activation="relu", padding="same")(input_layer)
pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)
conv2 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(pool1)
pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)
conv3 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(pool2)
encoded = MaxPooling2D(pool_size=(2, 2))(conv3)
conv4 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(encoded)
up1 = UpSampling2D(size=(2, 2))(conv4)
conv5 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(up1)
up2 = UpSampling2D(size=(2, 2))(conv5)
conv6 = Conv2D(16, kernel_size=3, activation="relu", padding="same")(up2)
up3 = UpSampling2D(size=(2, 2))(conv6)
decoded = Conv2D(3, kernel_size=3, activation="sigmoid", padding="same")(up3)

# Define the model
model = Model(inputs=input_layer, outputs=decoded)

# Compile the model
model.compile(optimizer="adam", loss="binary_crossentropy")

# Train the model
model.fit(img_array[np.newaxis, ...], img_array[np.newaxis, ...], epochs=10, batch_size=1)

# Evaluate the model
compressed_img = model.predict(img_array[np.newaxis, ...])[0]
print("Original Image Shape: ", img_array.shape)
print("Compressed Image Shape: ", compressed_img.shape)

# Display the original and compressed images
plt.subplot(1, 2, 1)
plt.imshow(img_array)
plt.title("Original Image")
plt.subplot(1, 2, 2)
plt.imshow(compressed_img)
plt.title("Compressed Image")
plt.show()

# Import necessary libraries
import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.models import Model
from tensorflow.keras.datasets import cifar10
import numpy as np
import matplotlib.pyplot as plt

# Load the CIFAR-10 dataset
(x_train, _), (x_test, _) = cifar10.load_data()
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Define the CNN architecture
input_layer = Input(shape=x_train.shape[1:])
conv1 = Conv2D(16, kernel_size=3, activation="relu", padding="same")(input_layer)
pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)
conv2 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(pool1)
pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)
conv3 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(pool2)
encoded = MaxPooling2D(pool_size=(2, 2))(conv3)
conv4 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(encoded)
up1 = UpSampling2D(size=(2, 2))(conv4)
conv5 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(up1)
up2 = UpSampling2D(size=(2, 2))(conv5)
conv6 = Conv2D(16, kernel_size=3, activation="relu", padding="same")(up2)
up3 = UpSampling2D(size=(2, 2))(conv6)
decoded = Conv2D(3, kernel_size=3, activation="sigmoid", padding="same")(up3)

# Define the model
model = Model(inputs=input_layer, outputs=decoded)

# Compile the model
model.compile(optimizer="adam", loss="binary_crossentropy")

# Train the model
model.fit(x_train, x_train, epochs=10, batch_size=32)

# Evaluate the model on the test set
compressed_images = model.predict(x_test)

# Display the original and compressed images
n = 6  # number of images to show
plt.figure(figsize=(12, 6))

for i in range(n):
    plt.subplot(2, n, i + 1)
    plt.imshow(x_test[i])
    plt.title("Original")
    plt.axis("off")

    plt.subplot(2, n, i + 1 + n)
    plt.imshow(compressed_images[i])
    plt.title("Compressed")
    plt.axis("off")

plt.tight_layout()
plt.show()

import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.models import Model
from tensorflow.keras.datasets import cifar10
import numpy as np
from skimage.metrics import peak_signal_noise_ratio

# Load the CIFAR-10 dataset
(x_train, _), (x_test, _) = cifar10.load_data()
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Define the CNN architecture
input_layer = Input(shape=x_train.shape[1:])
conv1 = Conv2D(16, kernel_size=3, activation="relu", padding="same")(input_layer)
pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)
conv2 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(pool1)
pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)
conv3 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(pool2)
encoded = MaxPooling2D(pool_size=(2, 2))(conv3)
conv4 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(encoded)
up1 = UpSampling2D(size=(2, 2))(conv4)
conv5 = Conv2D(8, kernel_size=3, activation="relu", padding="same")(up1)
up2 = UpSampling2D(size=(2, 2))(conv5)
conv6 = Conv2D(16, kernel_size=3, activation="relu", padding="same")(up2)
up3 = UpSampling2D(size=(2, 2))(conv6)
decoded = Conv2D(3, kernel_size=3, activation="sigmoid", padding="same")(up3)

# Define the model
model = Model(inputs=input_layer, outputs=decoded)

# Compile the model
model.compile(optimizer="adam", loss="binary_crossentropy")

# Train the model
model.fit(x_train, x_train, epochs=10, batch_size=32)

# Evaluate the model on the test set
compressed_images = model.predict(x_test)

# Calculate PSNR values for train and test sets
train_psnr = []
for i in range(x_train.shape[0]):
    original_img = x_train[i]
    compressed_img = model.predict(original_img[np.newaxis, ...])[0]
    psnr = peak_signal_noise_ratio(original_img, compressed_img, data_range=1.0)
    train_psnr.append(psnr)

test_psnr = []
for i in range(x_test.shape[0]):
    original_img = x_test[i]
    compressed_img = compressed_images[i]
    psnr = peak_signal_noise_ratio(original_img, compressed_img, data_range=1.0)
    test_psnr.append(psnr)

# Calculate and display average PSNR values
avg_train_psnr = np.mean(train_psnr)
avg_test_psnr = np.mean(test_psnr)

print("Average PSNR (train set):", avg_train_psnr)
print("Average PSNR (test set):", avg_test_psnr)